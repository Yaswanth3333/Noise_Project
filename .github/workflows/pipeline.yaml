name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install AWS CLI 
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Configure AWS credentials
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Authenticate Docker with Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Pull Docker image from Amazon ECR
      - name: Pull Docker image from ECR
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Install containernetworking-plugins
      - name: Install containernetworking-plugins
        run: |
          CNI_PLUGIN_VERSION="v1.5.0"
          CNI_PLUGIN_TAR="cni-plugins-linux-amd64-$CNI_PLUGIN_VERSION.tgz" # change arch if not on amd64
          CNI_PLUGIN_INSTALL_DIR="/opt/cni/bin"
          
          curl -LO "https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGIN_VERSION/$CNI_PLUGIN_TAR"
          sudo mkdir -p "$CNI_PLUGIN_INSTALL_DIR"
          sudo tar -xf "$CNI_PLUGIN_TAR" -C "$CNI_PLUGIN_INSTALL_DIR"
          rm "$CNI_PLUGIN_TAR"

      # Install conntrack
      - name: Install conntrack
        run: |
          sudo apt-get install -y conntrack

      # Set up Minikube and Install Go 1.20 and cri-dockerd
      - name: Set up Minikube and Install Go 1.20 and cri-dockerd
        run: |
          curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.22.0/crictl-v1.22.0-linux-amd64.tar.gz
          sudo tar zxvf crictl-v1.22.0-linux-amd64.tar.gz -C /usr/local/bin
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/
          wget https://golang.org/dl/go1.20.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.20.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y git
          git clone https://github.com/Mirantis/cri-dockerd.git
          cd cri-dockerd
          go get && go build -o bin/cri-dockerd
          sudo mv bin/cri-dockerd /usr/local/bin/
          cd ..


      # Start Minikube 
      - name: Start Minikube
        run: |
          #sudo systemctl start minikube
          #sudo minikube stop
          sudo minikube start --driver=none --force

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          #kubectl create deployment nginx-deployment --image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          #kubectl expose deployment nginx-deployment --type=NodePort --port=80
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
